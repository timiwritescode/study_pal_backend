openapi: 3.0.0
info:
  title: Study Pal API
  description: API documentation for study pal, a personalized study platform for college students
  version: 1.0.0
  contact:
    name: Odebode Zion Oluwatimilehin
    email: odebodezion@gmail.com

paths:
  /auth/register:
    post:
      summary: Register a new user
      tags:
        - Authentication
      requestBody:
        description: User registration details
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterUser'
      responses:
        '201':
          description: User registered successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  status_code:
                    type: integer
                    example: 201
                  message:
                    type: string
                    example: Your registration is successful
                  data:
                    type: object
                    properties:
                      access_token:
                        type: string
                        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c
                      user:
                        type: object
                        properties:
                          user_id:
                            type: string
                            format: uuid
                            example: 123e4567-e89b-12d3-a456-426614174000
                          first_name:
                            type: string
                            example: Albert
                          last_name:
                            type: string
                            example: Einstein
                          email:
                            type: string
                            example: albert.einstein@example.com
                          role:
                            type: string
                            example: student
                          institution:
                            type: string
                            example: Harvard University
        '400':
          description: Registration Unsuccessful
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: Bad Request
                  status_code:
                    type: integer
                    example: 400
                  message:
                    type: string
                    example: Registration unsuccessful

  /auth/login:
    post:
      summary: Log in a user
      description: Log in with an email and password.
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginUser'
      responses:
        '200':
          description: User logged in successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  status_code:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: Login Successful
                  data:
                    type: object
                    properties:
                      access_token:
                        type: string
                        example: eyJh...
                      user:
                        type: object
                        properties:
                          user_id:
                            type: string
                            format: uuid
                            example: 123e4567-e89b-12d3-a456-426614174000
                          first_name:
                            type: string
                            example: John
                          last_name:
                            type: string
                            example: Doe
                          email:
                            type: string
                            example: johndoe@example.com
                          role:
                            type: string
                            example: agent
        '401':
          description: Login Unsuccessful
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: Authentication failed
                  status_code:
                    type: integer
                    example: 401
                  message:
                    type: string
                    example: Bad Request
                    
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: Server error
                  status_code:
                    type: integer
                    example: 500
                  message:
                    type: string
                    example: Cannot process your request currently
                      
  /profile/user/{user_id}:
    get:
      summary: Get User details
      tags:
        - Profile Management
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
            description: ID of the client
      responses:
        '200':
          description: Request complete
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  status_code:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: Request Successful
                  data:
                    type: object
                    properties:
                      user:
                        type: object
                        properties:
                          user_id:
                            type: string
                            format: uuid
                            example: 123e4567-e89b-12d3-a456-426614174000
                          first_name:
                            type: string
                            example: albert
                          last_name:
                            type: string
                            example: einstein
                          email:
                            type: string
                            example: albert.einstein@example.com
                          institution:
                            type: string
                            example: Harvard University
                          nationality:
                            type: string
                            example: United states of America
                          profile_picture:
                            type: string
                            example: http://dp_image.com/dp_image.png
                          course_of_study:
                            type: string
                            example: string
                          role:
                            type: string
                            example: user
                  
  
  /auth/profile/client/{id}:
    patch:
      summary: Update user profile for a client
      tags:
        - Profile Management
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
            description: ID of the client
      requestBody:
        description: User details and preferences
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ClientProfile'
      responses:
        '200':
          description: User details updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  status_code:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: Client Profile updated successfully
            
  
  /auth/profile/agent/{agent_id}:
    patch:
      summary: Update user profile for an agent
      tags:
        - Profile Management
      parameters:
        - name: agent_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
            description: ID of the agent
      requestBody:
        description: Agent details
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AgentProfile'
      responses:
        '200':
          description: User details updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  status_code:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: Client Profile updated successfully
  
  /properties:
    get:
      summary: Get list of available properties
      tags:
        - Properties
      responses:
        '200':
          description: A list of testimonials for the agent
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Properties'
                  
  

  /agents/{agentId}/testimonials:
    get:
      summary: Get testimonials for an agent
      tags:
        - Agents
      parameters:
        - name: agentId
          in: path
          required: true
          schema:
            type: string
          description: ID of the agent
      responses:
        '200':
          description: A list of testimonials for the agent
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Testimonial'
        '404':
          description: Agent not found

components:
  schemas:
    RegisterUser:
      type: object
      required:
        - first_name
        - last_name
        - gender
        - phone
        - age
        - location
        - email
        - password
      properties:
        first_name:
          type: string
          example: John 
        last_name:
          type: string
          example: Doe
        gender:
          type: string
          example: Male
        phone:
          type: string
          example: 08157443999
        age:
          type: integer
          example: 26
        email:
          type: string
          format: email
          example: johndoe@example.com
        password:
          type: string
          format: password
          example: strongpassword123
        role:
          type: string
          enum: [client, agent, owner]
          example: agent

    LoginUser:
      type: object
      properties:
        email:
          type: string
          example: user@example.com
        password:
          type: string
          format: password
          example: string

    Testimonial:
      type: object
      required:
        - rating
        - comment
        - client
        - agent
      properties:
        id:
          type: string
          format: uuid
          example: 123e4567-e89b-12d3-a456-426614174000
        agent:
          type: string
          format: uuid
          example: 123e4567-e89b-12d3-a456-426614174000
        client:
          type: string
          format: uuid
          example: 123e4567-e89b-12d3-a456-426614174001
        rating:
          type: integer
          description: Rating between 1 and 5
          example: 4
        comment:
          type: string
          description: Client's review of the agent
          example: "The agent was very professional and helpful."
        created_at:
          type: string
          format: date-time
          example: '2023-08-24T14:15:22Z'
    
    Properties:
      type: object
      properties:
        id: 
          type: string
          format: uuid 
          example: 123e4567-e89b-12d3-a456-426614174000
        name:
          type: string
          example: Bliss Hostel
        location:
          type: string
          example: 4, Fancy Road, Stateline, Akure, Ondo State.
        is_verified:
          type: boolean
          example: True
        is_available:
          type: boolean
          example: True
        rating:
          type: integer
          example: 5
        price:
          type: integer
          example: 100000
        apartment_type:
          type: string
          example: 2 bedroom
        owner:
          type: string
          format: uuid
          description: Owner of the property's id
          example: 123e4567-e89b-12d3-a456-426614174000
        agent:
          type: string
          format: uuid
          description: Agent in charge of the property
        description:
          type: string
          description: A brief description of the property and it's ammenties
          example: A fully furnished 2 bedroom apartment, solar powered.
          
          
    ClientProfile:
      type: object
      required:
        - apartment_type
        - location
        - partner
        
      properties:
        apartment_type:
          type: string
          example: 3 bedroom
        location:
          type: string
          description: Geographical Location to conduct house search
          example: Akure
        partner:
          type: boolean
          description: Checking if the user would want a partner/roommate
        partner_age:
          type: integer
          description: Age of the partner
          example: 25
        partner_gender:
          type: string
          example: Male
          
    
    AgentProfile:
      type: object
      required:
        - apartment_type
        - location
        - is_verified
        
      properties:
        location:
          type: string
          description: Geographical Location where Agent works
          example: Akure
        is_verified:
          type: boolean
          description: Checking if the agent is verified
        age:
          type: integer
          description: Age of the Agent
          example: 25
          
          

  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
servers:
  # Added by API Auto Mocking Plugin
  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/ODEBODEZION/Studypal/1.0.0